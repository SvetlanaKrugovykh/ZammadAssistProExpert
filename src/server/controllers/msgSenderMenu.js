const { buttonsConfig } = require('../modules/keyboard')
const { globalBuffer } = require('../globalBuffer')
const { execPgQuery } = require('../db/common')
const { findUserById } = require('../db/tgUsersService')
const { getCombinedData } = require('../services/getCombinedData.service')
const fs = require('fs')
require('dotenv').config()

module.exports.msgSenderMenu = async function (bot, msg) {
  const checkChoices = await checkSelectedPeoplesAndSubdivisions(bot, msg, false)
  const chatId = msg.chat.id
  let title = 'üìß'
  if (!globalBuffer[chatId]?.selectedGroups && !globalBuffer[chatId]?.selectedPeriod) title = buttonsConfig.chooseSenMessageSettings.title
  if (checkChoices) title = 'üìß'
  await bot.sendMessage(msg.chat.id, title, {
    reply_markup: {
      keyboard: buttonsConfig.chooseSenMessageSettings.buttons,
      resize_keyboard: true
    }
  })
}

module.exports.chooseSubdivisionsFromList = async function (bot, msg) {
  const data = await getSubdivisions()
  const chatId = msg.chat.id

  if (!data && data.length === 0) {
    await bot.sendMessage(msg.chat.id, '–ù–∞ –∂–∞–ª—å, –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤.')
    return
  }

  if (globalBuffer[chatId] === undefined) globalBuffer[chatId] = {}
  globalBuffer[chatId].availableSubdivisions = data
  globalBuffer[chatId].selectedSubdivisions = []
  globalBuffer[msg.chat.id].SubdivisionsCounter = 0

  const subdivisionsButtons = {
    title: '–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª(–∏):',
    options: [{ resize_keyboard: true }],
    buttons: data.map(subdivision => [
      { text: `ü§Ωüèø‚Äç‚ôÇÔ∏è ${subdivision.subdivision_name} `, callback_data: `63_${subdivision.id}` }
    ])
  }
  await bot.sendMessage(msg.chat.id, subdivisionsButtons.title, {
    reply_markup: {
      inline_keyboard: subdivisionsButtons.buttons,
      resize_keyboard: true
    }
  })
}
module.exports.messageCreateScene = async function (bot, msg) {
  try {
    if (globalBuffer[msg.chat.id]?.selectedCustomers === undefined) {
      await bot.sendMessage(msg.chat.id, '–î–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–µ—Ä—ñ—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—á–∞/—ñ–≤')
      return false
    }
    await bot.sendMessage(msg.chat.id, buttonsConfig["messageCreate"].title, {
      reply_markup: {
        keyboard: buttonsConfig["messageCreate"].buttons,
        resize_keyboard: true,
        one_time_keyboard: false
      }
    })
  } catch (err) {
    console.log(err)
  }
}

module.exports.messageSender = async function (bot, msg, selectedByUser) {
  try {
    const chatId = msg.chat.id
    const selectedSubdivisions = globalBuffer[chatId]?.selectedSubdivisions
    const modifiedSubdivisions = selectedSubdivisions.map(subdivision => subdivision.replace('63_', ''))

    if (globalBuffer[chatId]?.selectedCustomers === undefined
      || globalBuffer[chatId]?.selectedCustomers.length === 0) {
      if (Array.isArray(selectedSubdivisions) && selectedSubdivisions.length > 0) {
        let combinedData = await getCombinedData(chatId, modifiedSubdivisions, selectedSubdivisions, 'finalize')
        if (!Array.isArray(combinedData) || combinedData.length === 0) {
          await bot.sendMessage(chatId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
          return
        }
        for (const subDivCustomer of combinedData) {
          globalBuffer[chatId]?.selectedCustomers.push(`73_${subDivCustomer.id}`)
        }
      } else {
        await bot.sendMessage(chatId, '–î–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–µ—Ä—ñ—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—á–∞/—ñ–≤')
        return false
      }
    }
    globalBuffer[chatId].selectedCustomers = [...new Set(globalBuffer[chatId].selectedCustomers)]

    if (!selectedByUser?.ticketBody || selectedByUser?.ticketBody.includes('üîµ –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è')) {
      await bot.sendMessage(chatId, '–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
      return false
    }

    const dirPath = process.env.DOWNLOAD_APP_PATH
    globalBuffer[chatId].msgSent = false

    let successCount = 0
    let errorCount = 0
    let totalUsers = globalBuffer[chatId].selectedCustomers.length

    await bot.sendMessage(chatId, `üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è ${totalUsers} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...`)
    await new Promise(resolve => setTimeout(resolve, 1000)) // Delay after start message

    for (let i = 0; i < globalBuffer[chatId].selectedCustomers.length; i++) {
      const selectedCustomer = globalBuffer[chatId].selectedCustomers[i]
      const user = await findUserById(Number(selectedCustomer.replace('73_', '')))

      console.log(`–û–±—Ä–æ–±–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${i + 1}/${totalUsers}:`, user)

      // Format user info for display
      const userInfo = user ?
        `${user.firstname || 'N/A'} ${user.lastname || 'N/A'} (${user.email || 'no email'})` :
        '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á'

      if (user && user.login && String(user.login).trim() !== '' && !isNaN(user.login)) {
        try {
          await bot.sendMessage(user.login, selectedByUser?.ticketBody || 'üîµ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:', { parse_mode: 'HTML' })
          console.log(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: ${user.login}`)

          // Send success notification to sender
          await bot.sendMessage(chatId, `‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${userInfo}`)
          await new Promise(resolve => setTimeout(resolve, 500)) // Delay after success notification

          if (Array.isArray(selectedByUser?.ticketAttachmentFileNames)) {
            for (const attachmentFileName of selectedByUser.ticketAttachmentFileNames) {
              const fileFullName = `${dirPath}${attachmentFileName}`
              await bot.sendDocument(user.login, fileFullName, {
                filename: attachmentFileName,
                caption: attachmentFileName
              })
              await new Promise(resolve => setTimeout(resolve, 500))
            }
          }

          successCount++
        } catch (sendError) {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.login}:`, sendError.message)

          // Send error notification to sender with reason
          const errorReason = sendError.message.includes('blocked') ? '–∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞' :
            sendError.message.includes('not found') ? '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' :
              sendError.message.includes('forbidden') ? '–Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É' :
                '—Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞'

          await bot.sendMessage(chatId, `‚ùå –ù–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${userInfo} - ${errorReason}`)
          await new Promise(resolve => setTimeout(resolve, 500)) // Delay after error notification

          errorCount++
        }
      } else {
        console.log(`‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π:`, user)

        // Send invalid user notification to sender
        const invalidReason = !user ? '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —ñ—Å–Ω—É—î' :
          !user.login ? '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π Telegram ID' :
            '–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π Telegram ID'

        await bot.sendMessage(chatId, `‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${userInfo} - ${invalidReason}`)
        await new Promise(resolve => setTimeout(resolve, 500)) // Delay after invalid user notification

        errorCount++
      }

      // Main delay between users
      if (i < globalBuffer[chatId].selectedCustomers.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000))
      }

      // Intermediate reporting every 10 users
      if ((i + 1) % 10 === 0) {
        await bot.sendMessage(chatId, `üìä –ü—Ä–æ–≥—Ä–µ—Å: ${i + 1}/${totalUsers} (–£—Å–ø—ñ—à–Ω–æ: ${successCount}, –ü–æ–º–∏–ª–æ–∫: ${errorCount})`)
        await new Promise(resolve => setTimeout(resolve, 1000)) // Delay after progress report
      }
    }

    // Clean up files
    if (Array.isArray(selectedByUser?.ticketAttachmentFileNames)) {
      for (const attachmentFileName of selectedByUser.ticketAttachmentFileNames) {
        try {
          const fileFullName = `${dirPath}${attachmentFileName}`
          fs.unlinkSync(fileFullName)
        } catch (fileError) {
          console.error('File deletion error:', fileError.message)
        }
      }
    }

    // Final statistics
    await new Promise(resolve => setTimeout(resolve, 1500)) // Delay before final statistics
    await bot.sendMessage(chatId,
      `‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
      `üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${totalUsers}\n` +
      `‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
      `‚ùå –ü–æ–º–∏–ª–æ–∫: ${errorCount}`,
      { parse_mode: 'HTML' }
    )

    // Clean up buffer
    globalBuffer[chatId].selectedCustomers = []
    globalBuffer[chatId].selectedSubdivisions = []
    globalBuffer[chatId].ticketAttachmentFileNames = []
    globalBuffer[chatId].msgSent = true

  } catch (err) {
    console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ messageSender:', err)
    await bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏.')
  }
}

async function getSubdivisions() {
  try {
    const data = await execPgQuery('SELECT * FROM subdivisions ORDER BY subdivision_name ASC', [], false, true)
    if (data === null) return null
    return data
  } catch (error) {
    console.error('Error in function getSubdivisions:', error)
    return null
  }
}

module.exports.msgSend = async function (bot, msg) {

  const checkChoices = await checkSelectedGroupsAndPeriod(bot, msg, true)
  if (checkChoices) {
    await createReport(bot, msg)
    globalBuffer[msg.chat.id] = {}
  }
}

async function checkSelectedPeoplesAndSubdivisions(bot, msg, isMessage) {
  const chatId = msg.chat.id
  let result = true
  try {
    console.log(`2_selectedGroups for  ${chatId} is ${globalBuffer[chatId]?.selectedGroups}`)
    if (!globalBuffer[chatId]?.selectedGroups || globalBuffer[chatId]?.selectedGroups?.length === 0) {
      if (isMessage) await bot.sendMessage(chatId, '–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏')
      result = false
    }

    if (globalBuffer[chatId]?.selectedPeriod === undefined) {
      if (isMessage) await bot.sendMessage(chatId, '–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –ø–µ—Ä—ñ–æ–¥')
      result = false
    }
    return result
  } catch (e) {
    console.log(e)
    return false
  }
}