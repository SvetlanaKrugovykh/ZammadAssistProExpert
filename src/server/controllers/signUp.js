const { buttonsConfig } = require('../modules/keyboard')
const inputLineScene = require('./inputLine')
const { createOrUpdateUserIntoDb } = require('../db/tgUsersService')
const GROUP_ID = Number(process.env.GROUP_ID)
const SENDER = process.env.SENDER

async function signUpForm(bot, msg, webAppUrl) {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, '–ù–∏–∂—á–µ –∑`—è–≤–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É', {
    reply_markup: {
      keyboard: [
        // [{ text: '–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É', web_app: { url: webAppUrl + '/form' } }]
        [{ text: '–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É', web_app: { url: webAppUrl + '/reg-form-tg-bot' } }],
        [{ text: 'üè†', callback_data: '0_4' }]
      ],
      resize_keyboard: true
    }
  })
}

async function singUpDataSave(bot, chatId, data) {
  console.log(chatId, data);
  const signUpRezult = await createOrUpdateUserIntoDb(chatId, data)
  console.log(signUpRezult)
  const message = {
    from: SENDER,
    to: SENDER,
    subject: 'Registration event from tg-bot',
    text: 'chatId:' + chatId,
    html: 'data:' + JSON.stringify(data),
  }
  try {
    await bot.sendMessage(GROUP_ID, `–ó–∞–ø–æ–≤–Ω–µ–Ω–∞ –Ω–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∞ —Ñ–æ—Ä–º–∞. –ö–æ–Ω—Ç–µ–Ω—Ç: ${JSON.stringify(data)},chatId=${chatId}  \n`, { parse_mode: "HTML" })
    console.log('Registration message sent', message);
  }
  catch (err) {
    console.log(err);
  }
}

async function signUpOldForm(bot, msg) {
  try {
    const chatId = msg.chat.id
    await bot.sendMessage(chatId, buttonsConfig["userCreateButtons"].title, {
      reply_markup: {
        keyboard: buttonsConfig["userCreateButtons"].buttons,
        resize_keyboard: true,
        one_time_keyboard: false
      }
    })
  } catch (err) {
    userCreateButtonsconsole.log(err)
  }
}

async function usersTextInput(bot, msg, menuItem, selectedByUser) {
  try {
    const txtCommand = await inputLineScene(bot, msg)
    if (menuItem === '0_10') {
      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(txtCommand)) {
        await bot.sendMessage(msg.chat.id, '–ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è <b>email</b>. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
        return selectedByUser
      }
      bot.sendMessage(msg.chat.id, '–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—é —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å <b>–í–≤–µ—Å—Ç–∏ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º`—è</b>\n', { parse_mode: 'HTML' })
      selectedByUser = { ...selectedByUser, userEmail: txtCommand }
    } else if (menuItem === '0_11') {
      if (txtCommand.length < 5) {
        await bot.sendMessage(msg.chat.id, '–ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è <b>–ü—Ä—ñ–∑–≤–∏—â–∞ —Ç–∞ —ñ–º`—è</b>. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
        return selectedByUser
      }
      await bot.sendMessage(msg.chat.id, '–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—é —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å <b>–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n', { parse_mode: 'HTML' })
      selectedByUser = { ...selectedByUser, userPIB: txtCommand }
    } else if (menuItem === '0_12') {
      const newtxtCommand = txtCommand.replace(/\D/g, '')
      if (/^\d{7,12}$/.test(newtxtCommand)) {
        await bot.sendMessage(msg.chat.id, '–ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è <b>–ù–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
        return selectedByUser
      }
      await bot.sendMessage(msg.chat.id, '–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—é —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å <b>–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n', { parse_mode: 'HTML' })
      selectedByUser = { ...selectedByUser, userPhoneNumber: newtxtCommand }
    }
    return selectedByUser
  } catch (err) {
    console.log(err)
    return selectedByUser
  }
}

async function usersRegistration(bot, msg, selectedByUser) {
  try {
    if (!selectedByUser?.userEmail) {
      await bot.sendMessage(msg.chat.id, '–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω Email. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
      return
    }
    if (!selectedByUser?.userPIB) {
      await bot.sendMessage(msg.chat.id, '–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º`—è. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
      return
    }
    if (!selectedByUser?.userPhoneNumber) {
      await bot.sendMessage(msg.chat.id, '–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω –µ—Ä–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n', { parse_mode: 'HTML' })
      return
    }

    const data = {
      email: selectedByUser?.userEmail,
      PIB: selectedByUser?.userPIB,
      phoneNumber: selectedByUser?.userPhoneNumber,
      contract: '',
      address: '',
    }

    console.log(data)
    await singUpDataSave(bot, msg.chat.id, data)
    await bot.sendMessage(msg.chat.id, '–î—è–∫—É—é, –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!')
    await bot.sendMessage(msg.chat.id, '–í–∞—à emal: ' + data?.email)
    await bot.sendMessage(msg.chat.id, '–í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º`—è: ' + data?.PIB)
    await bot.sendMessage(msg.chat.id, '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ' + data?.phoneNumber)
    await bot.sendMessage(msg.chat.id, '–í—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ. –Ø–∫—â–æ —É –í–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é /"–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/". –ó–∞—Ä–∞–∑ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start')
  } catch (err) {
    console.log(err)
  }
}

module.exports = { signUpForm, singUpDataSave, signUpOldForm, usersTextInput, usersRegistration }


